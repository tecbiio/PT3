import Movement as m
import Swap as s

#Deplacement des arètes pour pouvoir les échanger facilement ": 
#le résultat de chaque fonction va se trouver en position 
#WO pour etre échangé avec celui en position WR
#puis on met la nouvelle arète dans la position où elle était
#(nom de la classe à changer)
#Arètes mises plusieurs fois car dépent de leur orientation (2 orientations delif fonc=="férentes par arète)
class DeplacementEdges:
    def deplacer(self, fonc):
        if fonc=="RG":
            m.inverseUp()
            m.inverseFront()
            m.up()
            s.swapEdges()
            m.inverseUp()
            m.front()
            m.up()
        elif fonc=="GR":
            m.up()
            m.up()
            m.right()
            m.up()
            m.up()
            s.swapEdges()
            m.up()
            m.up()
            m.inverseRight()
            m.up()
            m.up()
        elif fonc=="GO":
            m.left()
            s.swapEdges()
            m.inverseLeft()
        elif fonc=="OG":
            m.inverseUp()
            m.front()
            m.up()
            s.swapEdges()
            m.inverseUp()
            m.inverseFront()
            m.up()
        elif fonc=="OB":
            m.up()
            m.Back()
            m.inverseUp()
            s.swapEdges()
            m.up()
            m.inverseBack()
            m.inverseUp()
        elif fonc=="BO":
            m.inverseLeft()
            s.swapEdges()
            m.left()
        elif fonc=="BR":
            m.up()
            m.up()
            m.inverseRight()
            m.up()
            m.up()
            s.swapEdges()
            m.up()
            m.up()
            m.right()
            m.up()
            m.up()
        elif fonc=="RB":
            m.up()
            m.inverseBack()
            m.inverseUp()
            s.swapEdges()
            m.up()
            m.Back()
            m.inverseUp()
        elif fonc=="YR":
            m.up()
            m.up()
            m.right()
            m.right()
            m.up()
            m.up()
            s.swapEdges()
            m.up()
            m.up()
            m.inverseRight()
            m.inverseRight()
            m.up()
            m.up()        
        elif fonc=="RY":
            m.down()
            m.down()
            m.left()
            m.inverseUp()
            m.front()
            m.up()
            s.swapEdges()
            m.inverseUp()
            m.inverseFront()
            m.up()
            m.inverseLeft()
            m.down()
            m.down()
        elif fonc=="YG":
            m.inverseUp()
            m.front()
            m.front()
            m.up()
            s.swapEdges()
            m.inverseUp()
            m.front()
            m.front()
            m.up()
        elif fonc=="GY":
            m.down()
            m.left()
            m.inverseUp()
            m.front()
            m.up()
            s.swapEdges()
            m.inverseUp()
            m.inverseFront()
            m.up()
            m.inverseLeft()
            m.inverseDown()
        elif fonc=="YO":
            m.left()
            m.left()
            s.swapEdges()
            m.left()
            m.left()
        elif fonc=="OY":
            m.left()
            m.inverseUp()
            m.front()
            m.up()
            s.swapEdges()
            m.inverseUp()
            m.inverseFront()
            m.up()
            m.inverseLeft()
        elif fonc=="YB":
            m.up()
            m.Back()
            m.Back()
            m.inverseUp()
            s.swapEdges()
            m.up()
            m.Back()
            m.Back()
            m.inverseUp()
        elif fonc=="BY":
            m.inverseDown()
            m.left()
            m.inverseUp()
            m.front()
            m.up()
            s.swapEdges()
            m.inverseUp()
            m.inverseFront()
            m.up()
            m.inverseLeft()
            m.down()
        #elif fonc=="WR":
            #Faire un non fait

        #elif fonc=="RW":
        elif fonc=="WG":
            m.right()
            m.right()
            m.up()
            m.right()
            m.right()
            s.swapEdges()
            m.right()
            m.right()
            m.inverseUp()
            m.right()
            m.right()
        elif fonc=="GW":
            m.right()
            m.front()
            m.left()
            m.inverseRight()
            s.swapEdges()
            m.right()
            m.inverseLeft()
            m.inverseFront()
            m.inverseRight()
        elif fonc=="WO":
            s.swapEdges()
        elif fonc=="OW":
            m.inverseLeft()
            m.inverseUp()
            m.front()
            m.up()
            s.swapEdges()
            m.inverseUp()
            m.inverseFront()
            m.up()
            m.left()
        elif fonc=="WB":
            m.right()
            m.right()
            m.inverseUp()
            m.right()
            m.right()
            s.swapEdges()
            m.right()
            m.right()
            m.up()
            m.right()
            m.right()
        elif fonc=="BW":
            m.inverseRight()
            m.Back()
            m.inverseLeft()
            m.right()
            s.swapEdges()
            m.inverseRight()
            m.left()
            m.inverseBack()
            m.right()