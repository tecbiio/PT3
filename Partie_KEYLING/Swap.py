import Mouvements as m

#Classe permettant d'échanger deux cubes
class Swap:
    #Fonction échangeant deux côtés (avec des coins aussi donc à faire avant les coins)
    def swapEdges():
        m.rightMovement()
        m.upMovement()
        m.inverseRightMovement()
        m.inverseUpMovement() 
        m.inverseRightMovement() 
        m.frontMovement()
        m.rightMovement()
        m.rightMovement()
        m.inverseUpMovement() 
        m.inverseRightMovement() 
        m.inverseUpMovement() 
        m.rightMovement()
        m.upMovement()
        m.inverseRightMovement()
        m.inverseFrontMovement()
    #Fonction échangeant deux coins
    def swapCorners():
        m.rightMovement()
        m.inverseUpMovement()
        m.inverseRightMovement()
        m.inverseUpMovement()
        m.rightMovement()
        m.upMovement()
        m.inverseRightMovement()
        m.inverseFrontMovement()
        m.rightMovement()
        m.upMovement()
        m.inverseRightMovement()
        m.inverseUpMovement()
        m.inverseRightMovement()
        m.frontMovement()
        m.rightMovement()
    #Fonction parité: à faire si le nombre de swap est impair (les swap modifient aussi quelques autres trucs une fois sur 2)
    #Si ne marche pas, faire un "triangle" --> en gros faire 3 swap qui reviennent au même endroit
    def parity():
        m.rightMovement()
        m.inverseUpMovement()
        m.inverseRightMovement()
        m.inverseUpMovement()
        m.rightMovement()
        m.upMovement()
        m.rightMovement()
        m.downMovement()
        m.inverseRightMovement()
        m.inverseUpMovement()
        m.rightMovement()
        m.inverseDownMovement()
        m.inverseRightMovement()
        m.upMovement()
        m.upMovement()
        m.inverseRightMovement()
        m.inverseUpMovement()

